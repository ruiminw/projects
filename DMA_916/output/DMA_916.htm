<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\DMA_916.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\DMA_916.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Tue Jan 31 20:30:10 2023
<BR><P>
<H3>Maximum Stack Usage =        136 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
app_main &rArr; setup_peripherals &rArr; config_uart &rArr; apUART_Initialize &rArr; apUART_BaudRateSet
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">DMA_cb_isr</a> from main.o(.text.DMA_cb_isr) referenced 2 times from main.o(.text.DMA_Test)
 <LI><a href="#[0]">Reset_Handler</a> from startup_ing91600.o(.text) referenced from startup_ing91600.o(RESET)
 <LI><a href="#[2]">__scatterload</a> from init.o(.text) referenced from startup_ing91600.o(.text)
 <LI><a href="#[3]">app_main</a> from main.o(.text.app_main) referenced from startup_ing91600.o(.text)
 <LI><a href="#[a]">app_timer_callback</a> from main.o(.text.app_timer_callback) referenced 2 times from main.o(.text.setup_peripherals)
 <LI><a href="#[6]">cb_assertion</a> from main.o(.text.cb_assertion) referenced 2 times from main.o(.text.app_main)
 <LI><a href="#[5]">cb_hard_fault</a> from main.o(.text.cb_hard_fault) referenced 2 times from main.o(.text.app_main)
 <LI><a href="#[7]">cb_heap_out_of_mem</a> from main.o(.text.cb_heap_out_of_mem) referenced 2 times from main.o(.text.app_main)
 <LI><a href="#[8]">cb_putc</a> from main.o(.text.cb_putc) referenced 2 times from main.o(.text.app_main)
 <LI><a href="#[b]">fputc</a> from main.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[1]">main</a> from startup_ing91600.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[9]">watchdog_task</a> from main.o(.text.watchdog_task) referenced 2 times from main.o(.text.app_main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1c]"></a>platform_printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Test
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_heap_out_of_mem
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hard_fault
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_assertion
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_callback
</UL>

<P><STRONG><a name="[2b]"></a>platform_set_evt_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[1f]"></a>platform_set_irq_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Test
</UL>

<P><STRONG><a name="[34]"></a>vTaskDelay</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_task
</UL>

<P><STRONG><a name="[2d]"></a>xTaskCreate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[32]"></a>xTaskGetTickCount</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[31]"></a>xTimerCreate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[33]"></a>xTimerGenericCommand</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[3d]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3e]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[3f]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[40]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[41]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[42]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_ing91600.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_ing91600.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(.text)
</UL>
<P><STRONG><a name="[43]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[20]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Test
</UL>

<P><STRONG><a name="[f]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[14]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[15]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[16]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[17]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[10]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[45]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[11]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[46]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[12]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[19]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1a]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[18]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[48]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>DMA_ClearChannelIntState</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, peripheral_dma.o(.text.DMA_ClearChannelIntState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA_ClearChannelIntState
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_cb_isr
</UL>

<P><STRONG><a name="[1b]"></a>DMA_EnableChannel</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, peripheral_dma.o(.text.DMA_EnableChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA_EnableChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Test
</UL>

<P><STRONG><a name="[22]"></a>DMA_GetChannelIntState</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, peripheral_dma.o(.text.DMA_GetChannelIntState))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_GetChannelIntState
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_cb_isr
</UL>

<P><STRONG><a name="[21]"></a>DMA_PrepareMem2Mem</STRONG> (Thumb, 132 bytes, Stack size 36 bytes, peripheral_dma.o(.text.DMA_PrepareMem2Mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DMA_PrepareMem2Mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Test
</UL>

<P><STRONG><a name="[1e]"></a>DMA_Reset</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, peripheral_dma.o(.text.DMA_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DMA_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Test
</UL>

<P><STRONG><a name="[1d]"></a>DMA_Test</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, main.o(.text.DMA_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DMA_Test &rArr; DMA_PrepareMem2Mem
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_irq_callback
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Reset
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_PrepareMem2Mem
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_EnableChannel
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_callback
</UL>

<P><STRONG><a name="[25]"></a>SYSCTRL_ClearClkGate</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClearClkGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClkGateCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
</UL>

<P><STRONG><a name="[27]"></a>SYSCTRL_ClearClkGateMulti</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClearClkGateMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SYSCTRL_ClearClkGateMulti &rArr; SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGate
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[35]"></a>TMR_WatchDogRestart</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, peripheral_timer.o(.text.TMR_WatchDogRestart))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_task
</UL>

<P><STRONG><a name="[2f]"></a>UART_SendData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, peripheral_uart.o(.text.UART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>

<P><STRONG><a name="[2a]"></a>apUART_BaudRateSet</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, peripheral_uart.o(.text.apUART_BaudRateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>

<P><STRONG><a name="[2e]"></a>apUART_Check_TXFIFO_FULL</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, peripheral_uart.o(.text.apUART_Check_TXFIFO_FULL))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = apUART_Check_TXFIFO_FULL
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>

<P><STRONG><a name="[29]"></a>apUART_Initialize</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, peripheral_uart.o(.text.apUART_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart
</UL>

<P><STRONG><a name="[3]"></a>app_main</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, main.o(.text.app_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = app_main &rArr; setup_peripherals &rArr; config_uart &rArr; apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_evt_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(.text)
</UL>
<P><STRONG><a name="[8]"></a>cb_putc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(.text.cb_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cb_putc &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_TXFIFO_FULL
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[30]"></a>config_uart</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, main.o(.text.config_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = config_uart &rArr; apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[b]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fputc &rArr; cb_putc &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[2c]"></a>setup_peripherals</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, main.o(.text.setup_peripherals))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = setup_peripherals &rArr; config_uart &rArr; apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[36]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[49]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[4a]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[4b]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[24]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_cb_isr
</UL>

<P><STRONG><a name="[4c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[4d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[4e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4]"></a>DMA_cb_isr</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, main.o(.text.DMA_cb_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DMA_cb_isr &rArr; DMA_ClearChannelIntState
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetChannelIntState
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearChannelIntState
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.DMA_Test)
</UL>
<P><STRONG><a name="[a]"></a>app_timer_callback</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(.text.app_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = app_timer_callback &rArr; DMA_Test &rArr; DMA_PrepareMem2Mem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.setup_peripherals)
</UL>
<P><STRONG><a name="[6]"></a>cb_assertion</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(.text.cb_assertion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cb_assertion
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[5]"></a>cb_hard_fault</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, main.o(.text.cb_hard_fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cb_hard_fault
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[7]"></a>cb_heap_out_of_mem</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(.text.cb_heap_out_of_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cb_heap_out_of_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[9]"></a>watchdog_task</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text.watchdog_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = watchdog_task
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_WatchDogRestart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[26]"></a>SYSCTRL_ClkGateCtrl</STRONG> (Thumb, 886 bytes, Stack size 32 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClkGateCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGate
</UL>

<P><STRONG><a name="[28]"></a>set_reg_bit</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, peripheral_sysctrl.o(.text.set_reg_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClkGateCtrl
</UL>

<P><STRONG><a name="[38]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[37]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[3b]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3a]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
