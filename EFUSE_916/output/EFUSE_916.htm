<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\EFUSE_916.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\EFUSE_916.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Sat Feb  4 10:36:30 2023
<BR><P>
<H3>Maximum Stack Usage =        168 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
app_main &rArr; setup_peripherals &rArr; config_uart &rArr; apUART_Initialize &rArr; apUART_BaudRateSet
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a> from startup_ing91600.o(.text) referenced from startup_ing91600.o(RESET)
 <LI><a href="#[2]">__scatterload</a> from init.o(.text) referenced from startup_ing91600.o(.text)
 <LI><a href="#[3]">app_main</a> from main.o(.text.app_main) referenced from startup_ing91600.o(.text)
 <LI><a href="#[5]">cb_assertion</a> from main.o(.text.cb_assertion) referenced 2 times from main.o(.text.app_main)
 <LI><a href="#[4]">cb_hard_fault</a> from main.o(.text.cb_hard_fault) referenced 2 times from main.o(.text.app_main)
 <LI><a href="#[6]">cb_heap_out_of_mem</a> from main.o(.text.cb_heap_out_of_mem) referenced 2 times from main.o(.text.app_main)
 <LI><a href="#[9]">cb_putc</a> from main.o(.text.cb_putc) referenced 2 times from main.o(.text.app_main)
 <LI><a href="#[b]">cb_trace_rtt</a> from trace.o(.text.cb_trace_rtt) referenced 2 times from main.o(.text.app_main)
 <LI><a href="#[d]">gpio_isr</a> from main.o(.text.gpio_isr) referenced 2 times from main.o(.text.setup_peripherals)
 <LI><a href="#[1]">main</a> from startup_ing91600.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[7]">on_deep_sleep_wakeup</a> from main.o(.text.on_deep_sleep_wakeup) referenced 2 times from main.o(.text.app_main)
 <LI><a href="#[c]">packet_schedule_task</a> from main.o(.text.packet_schedule_task) referenced 2 times from main.o(.text.app_main)
 <LI><a href="#[8]">query_deep_sleep_allowed</a> from main.o(.text.query_deep_sleep_allowed) referenced 2 times from main.o(.text.app_main)
 <LI><a href="#[a]">watchdog_task</a> from main.o(.text.watchdog_task) referenced 2 times from main.o(.text.app_main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[36]"></a>platform_config</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[3b]"></a>platform_get_gen_os_driver</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_trace_rtt
</UL>

<P><STRONG><a name="[38]"></a>platform_printf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_schedule_task
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_heap_out_of_mem
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hard_fault
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_assertion
</UL>

<P><STRONG><a name="[32]"></a>platform_set_evt_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[45]"></a>platform_set_irq_callback</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[46]"></a>vTaskDelay</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_task
</UL>

<P><STRONG><a name="[37]"></a>xQueueGenericCreate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[3f]"></a>xQueueGiveFromISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_detector_start_calc
</UL>

<P><STRONG><a name="[40]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_schedule_task
</UL>

<P><STRONG><a name="[34]"></a>xTaskCreate</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, symdefs.m(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[48]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[10]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[49]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[4a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[4b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[4c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[4d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_ing91600.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_ing91600.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[11]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[2f]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[13]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[51]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[52]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>EFUSE_GetDataValidFlag</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, peripheral_efuse.o(.text.EFUSE_GetDataValidFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EFUSE_GetDataValidFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_schedule_task
</UL>

<P><STRONG><a name="[43]"></a>EFUSE_GetEfuseData</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, peripheral_efuse.o(.text.EFUSE_GetEfuseData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EFUSE_GetEfuseData
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_schedule_task
</UL>

<P><STRONG><a name="[16]"></a>EFUSE_GetStatusBusy</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, peripheral_efuse.o(.text.EFUSE_GetStatusBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EFUSE_GetStatusBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFUSE_WriteEfuseDataWord
</UL>

<P><STRONG><a name="[17]"></a>EFUSE_Lock</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, peripheral_efuse.o(.text.EFUSE_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EFUSE_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFUSE_WriteEfuseDataWord
</UL>

<P><STRONG><a name="[41]"></a>EFUSE_SetRdFlag</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, peripheral_efuse.o(.text.EFUSE_SetRdFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EFUSE_SetRdFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_schedule_task
</UL>

<P><STRONG><a name="[15]"></a>EFUSE_UnLock</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, peripheral_efuse.o(.text.EFUSE_UnLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EFUSE_UnLock
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFUSE_WriteEfuseDataWord
</UL>

<P><STRONG><a name="[14]"></a>EFUSE_WriteEfuseDataWord</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, peripheral_efuse.o(.text.EFUSE_WriteEfuseDataWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EFUSE_WriteEfuseDataWord &rArr; EFUSE_UnLock
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFUSE_UnLock
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFUSE_Lock
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFUSE_GetStatusBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_schedule_task
</UL>

<P><STRONG><a name="[3e]"></a>GIO_ClearAllIntStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, peripheral_gpio.o(.text.GIO_ClearAllIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_isr
</UL>

<P><STRONG><a name="[18]"></a>GIO_ConfigIntSource</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, peripheral_gpio.o(.text.GIO_ConfigIntSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GIO_ConfigIntSource &rArr; map_int_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_int_mode
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[1b]"></a>GIO_SetDirection</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, peripheral_gpio.o(.text.GIO_SetDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GIO_SetDirection &rArr; GIO_MaskedWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[1c]"></a>PINCTRL_SetPadMux</STRONG> (Thumb, 422 bytes, Stack size 24 bytes, peripheral_pinctrl.o(.text.PINCTRL_SetPadMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PINCTRL_SetPadMux &rArr; source_id_on_pin
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;source_id_on_pin
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[1f]"></a>SEGGER_RTT_GetAvailWriteSpace</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, trace.o(.text.SEGGER_RTT_GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SEGGER_RTT_GetAvailWriteSpace &rArr; _GetAvailWriteSpace
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_trace_rtt
</UL>

<P><STRONG><a name="[21]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, trace.o(.text.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_rtt_init
</UL>

<P><STRONG><a name="[23]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, trace.o(.text.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_trace_rtt
</UL>

<P><STRONG><a name="[24]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, trace.o(.text.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[27]"></a>SYSCTRL_ClearClkGate</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClearClkGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClkGateCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
</UL>

<P><STRONG><a name="[29]"></a>SYSCTRL_ClearClkGateMulti</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClearClkGateMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SYSCTRL_ClearClkGateMulti &rArr; SYSCTRL_ClearClkGate &rArr; SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGate
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[2b]"></a>SYSCTRL_ReleaseBlock</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ReleaseBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SYSCTRL_ReleaseBlock &rArr; SYSCTRL_ResetBlockCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ResetBlockCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_schedule_task
</UL>

<P><STRONG><a name="[2d]"></a>SYSCTRL_ResetBlock</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ResetBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SYSCTRL_ResetBlock &rArr; SYSCTRL_ResetBlockCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ResetBlockCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;packet_schedule_task
</UL>

<P><STRONG><a name="[44]"></a>TMR_WatchDogEnable3</STRONG> (Thumb, 456 bytes, Stack size 20 bytes, peripheral_timer.o(.text.TMR_WatchDogEnable3))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TMR_WatchDogEnable3
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[47]"></a>TMR_WatchDogRestart</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, peripheral_timer.o(.text.TMR_WatchDogRestart))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_task
</UL>

<P><STRONG><a name="[3a]"></a>UART_SendData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, peripheral_uart.o(.text.UART_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>

<P><STRONG><a name="[31]"></a>apUART_BaudRateSet</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, peripheral_uart.o(.text.apUART_BaudRateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>

<P><STRONG><a name="[39]"></a>apUART_Check_TXFIFO_FULL</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, peripheral_uart.o(.text.apUART_Check_TXFIFO_FULL))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = apUART_Check_TXFIFO_FULL
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_putc
</UL>

<P><STRONG><a name="[30]"></a>apUART_Initialize</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, peripheral_uart.o(.text.apUART_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_BaudRateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart
</UL>

<P><STRONG><a name="[3]"></a>app_main</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, main.o(.text.app_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = app_main &rArr; setup_peripherals &rArr; config_uart &rArr; apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trace_rtt_init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_evt_callback
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ing91600.o(.text)
</UL>
<P><STRONG><a name="[9]"></a>cb_putc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(.text.cb_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cb_putc &rArr; UART_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Check_TXFIFO_FULL
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[b]"></a>cb_trace_rtt</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, trace.o(.text.cb_trace_rtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = cb_trace_rtt &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_GetAvailWriteSpace
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_get_gen_os_driver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[3c]"></a>config_uart</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, main.o(.text.config_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = config_uart &rArr; apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apUART_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>

<P><STRONG><a name="[d]"></a>gpio_isr</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(.text.gpio_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_isr &rArr; key_detector_start_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_detector_start_calc
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_ClearAllIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.setup_peripherals)
</UL>
<P><STRONG><a name="[3d]"></a>key_detector_start_calc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(.text.key_detector_start_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = key_detector_start_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_isr
</UL>

<P><STRONG><a name="[7]"></a>on_deep_sleep_wakeup</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, main.o(.text.on_deep_sleep_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = on_deep_sleep_wakeup &rArr; setup_peripherals &rArr; config_uart &rArr; apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_peripherals
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[8]"></a>query_deep_sleep_allowed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text.query_deep_sleep_allowed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = query_deep_sleep_allowed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[33]"></a>setup_peripherals</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, main.o(.text.setup_peripherals))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = setup_peripherals &rArr; config_uart &rArr; apUART_Initialize &rArr; apUART_BaudRateSet
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_set_irq_callback
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_uart
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_WatchDogEnable3
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ResetBlock
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ReleaseBlock
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGateMulti
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_SetDirection
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_ConfigIntSource
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_deep_sleep_wakeup
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[35]"></a>trace_rtt_init</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, trace.o(.text.trace_rtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = trace_rtt_init &rArr; SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_main
</UL>

<P><STRONG><a name="[53]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[54]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[55]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5]"></a>cb_assertion</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(.text.cb_assertion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cb_assertion
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[4]"></a>cb_hard_fault</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, main.o(.text.cb_hard_fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cb_hard_fault
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[6]"></a>cb_heap_out_of_mem</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(.text.cb_heap_out_of_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cb_heap_out_of_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[c]"></a>packet_schedule_task</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, main.o(.text.packet_schedule_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = packet_schedule_task &rArr; SYSCTRL_ResetBlock &rArr; SYSCTRL_ResetBlockCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_printf
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ResetBlock
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ReleaseBlock
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFUSE_WriteEfuseDataWord
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFUSE_SetRdFlag
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFUSE_GetEfuseData
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFUSE_GetDataValidFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[a]"></a>watchdog_task</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, main.o(.text.watchdog_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = watchdog_task
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_WatchDogRestart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.app_main)
</UL>
<P><STRONG><a name="[1e]"></a>set_reg_bits</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, peripheral_pinctrl.o(.text.set_reg_bits))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = set_reg_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
</UL>

<P><STRONG><a name="[1d]"></a>source_id_on_pin</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, peripheral_pinctrl.o(.text.source_id_on_pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = source_id_on_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINCTRL_SetPadMux
</UL>

<P><STRONG><a name="[28]"></a>SYSCTRL_ClkGateCtrl</STRONG> (Thumb, 902 bytes, Stack size 32 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ClkGateCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SYSCTRL_ClkGateCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClearClkGate
</UL>

<P><STRONG><a name="[2c]"></a>SYSCTRL_ResetBlockCtrl</STRONG> (Thumb, 750 bytes, Stack size 24 bytes, peripheral_sysctrl.o(.text.SYSCTRL_ResetBlockCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SYSCTRL_ResetBlockCtrl &rArr; set_reg_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ResetBlock
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ReleaseBlock
</UL>

<P><STRONG><a name="[2a]"></a>set_reg_bit</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, peripheral_sysctrl.o(.text.set_reg_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = set_reg_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ResetBlockCtrl
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTRL_ClkGateCtrl
</UL>

<P><STRONG><a name="[1a]"></a>GIO_MaskedWrite</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, peripheral_gpio.o(.text.GIO_MaskedWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GIO_MaskedWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_SetDirection
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_ConfigIntSource
</UL>

<P><STRONG><a name="[19]"></a>map_int_mode</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, peripheral_gpio.o(.text.map_int_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = map_int_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIO_ConfigIntSource
</UL>

<P><STRONG><a name="[22]"></a>_DoInit</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, trace.o(.text._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>

<P><STRONG><a name="[20]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, trace.o(.text._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_GetAvailWriteSpace
</UL>

<P><STRONG><a name="[26]"></a>_WriteBlocking</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, trace.o(.text._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _WriteBlocking
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[25]"></a>_WriteNoCheck</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, trace.o(.text._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteNoCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
